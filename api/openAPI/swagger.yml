openapi: 3.0.3
info:
  title: zero-totp API
  description: API for the zero-totp application
  version: "1.0"
servers:
  - url: http://zero-totp.local:8080
    description: local API server
security:
  - JWTAuth: []
paths:
  /signup:
    post:
      operationId: controllers.signup
      tags:
        - User
      summary: Sign a user up to the application
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                derivedKeySalt:
                  type: string
                ZKE_key:
                  type: string
                  description: The user's ZKE key ENCRYPTED by the user
                passphraseSalt:
                  type: string
      responses:
        "201": # status code
          description: Sign up successful
        "400":
          description: Missing required parameters
        "409":
          description: User already exists
  /login:
    post:
      operationId: controllers.login
      tags:
        - User
      summary: Log a user in the application
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200": # status code
          description: successful login. The JWT is returned in the response body
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: "foo"
                  id:
                    type: integer
                    example: 1
                  derivedKeySalt:
                    type: string
                    example: "AAAAA="
                  role:
                    type: string
                    example: "user"
        "400":
          description: Missing required parameters
        "403":
          description: Authentication failed
  /login/specs:
    get:
      operationId: controllers.get_login_specs
      tags:
        - User
      summary: Return the login specs for this user
      security: []
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: The user's email
      responses:
        "200": # status code
          description: Return the login specs
  /zke_encrypted_key:
    get:
      operationId: controllers.get_ZKE_encrypted_key
      tags:
        - Vault
      summary: Return the user's encrypted ZKE key (encrypted by the user, before transmitting)
      responses:
        "200": # status code
          description: Return the user's ZKE key (encrypted)
        "401":
          description: Unauthorized
        "403":
          description: Access denied
  /encrypted_secret/{uuid}:
    get:
      operationId: controllers.get_encrypted_secret
      tags:
        - Vault
      summary: Return the user's encrypted secret
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: The uuid of the secret to retrieve
      responses:
        "200": # status code
          description: Return the user's encrypted secret
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
    post:
      operationId: controllers.add_encrypted_secret
      tags:
        - Vault
      summary: Add an encrypted secret to the user's vault
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: The uuid of the secret to add
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enc_secret:
                  type: string
      responses:
        "201": # status code
          description: Secret added
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
    put:
      operationId: controllers.update_encrypted_secret
      tags:
        - Vault
      summary: Update an encrypted secret in the user's vault
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: The uuid of the secret to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enc_secret:
                  type: string
      responses:
        "201": # status code
          description: Secret updated
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
    delete:
      operationId: controllers.delete_encrypted_secret
      tags:
        - Vault
      summary: Delete an encrypted secret from the user's vault
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          description: The uuid of the secret to delete
      responses:
        "201": # status code
          description: Secret deleted
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
  /all_secrets:
    get:
      operationId: controllers.get_all_secrets
      tags:
        - Vault
      summary: Return all the user's encrypted secrets
      responses:
        "200": # status code
          description: Return all the user's encrypted secrets
        "401":
          description: Unauthorized
        "404":
          description: No secrets found
  /update/email:
    put:
      operationId: controllers.update_email
      tags:
        - User
      summary: Update the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "201": # status code
          description: email updated
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied

  /update/vault:
    put:
      operationId: controllers.update_vault
      tags:
        - User
      summary: Update the user's passphrase, encrypted vault and zke ecrypted key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_passphrase:
                  type: string
                new_passphrase:
                  type: string
                enc_vault:
                  type: string
                zke_enc:
                  type: string
                passphrase_salt:
                  type: string
                derived_key_salt:
                  type: string
      responses:
        "201": # status code
          description: passphrase, vault and zke key updated
        "400":
          description: Missing required parameters
        "401":
          description: Unauthorized
        "403":
          description: Access denied
        "500":
          description: Internal server error

  /vault/export:
    get:
      operationId: controllers.export_vault
      tags:
        - Vault
      summary: Return all the user's encrypted vault ready for download
      responses:
        "200": # status code
          description: Return all the user's encrypted secrets
        "401":
          description: Unauthorized
        "404":
          description: No secrets found

  /google-drive/oauth/authorization-flow:
    get:
      operationId: controllers.get_authorization_flow
      tags:
        - Google Drive
      summary: Get the OAuth authorization flow URI
      responses:
        "200": 
          description: Return the authorization URI
        "401":
          description: Unauthorized
        "403":
          description: Access denied
  
  /google-drive/oauth/callback:
    get:
      operationId: controllers.oauth_callback
      tags:
        - Google Drive
      summary: OAuth callback endpoint for the authorization flow
      responses:
        "302": 
          description: Callback successful
  
  /google-drive/option:
    get:
      operationId: controllers.get_google_drive_option
      tags:
        - Google Drive
      summary: Check if the google drive option as a backup is enabled
      responses:
        "200": 
          description: Return the sync status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The option status
                    example: "enabled"
        "401":
          description: Unauthorized
        "403":
          description: Access disabled
    delete:
      operationId: controllers.delete_google_drive_option
      tags:
        - Google Drive
      summary: Disable the google drive option as a backup. Delete the oauth token.
      responses:
        "200": 
          description: Google drive option disabled
        "401":
          description: Unauthorized
        "403":
          description: Access disabled
  /admin/users:
    get:
      operationId: controllers.get_users_list
      tags:
        - Admin
      summary: Return all users
      responses:
        "200": # status code
          description: Return all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    example: [{"username": "foo", "email":"bar", "role":"user", "createdAt":"01/01/2001", "isBlocked":false}]

        "401":
          description: Unauthorized
        "403":
          description: Access denied
  /admin/login:
    post:
      operationId: controllers.admin_login 
      tags:
        - Admin
      summary: Admin login verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        "200": # status code
          description:  Return 200 with an admin cookie if the challenge is solved. 403 otherwise
        "401":
          description: Unauthorized
        "403":
          description: Access denied
  /google-drive/backup:
    put:
      operationId: controllers.backup_to_google_drive
      tags:
        - Google Drive
      summary: Back up the encrypted vault to Google Drive
      responses:
        "200": 
          description: Return the backup status
        "401":
          description: Unauthorized
        "403":
          description: Access disabled
        "500":
          description: Backup failed

  /role:
    get:
      operationId: controllers.get_role
      tags:
        - User
      summary: Return the user's role
      responses:
        "200": # status code
          description: Return the user's role
          content:
            application/json:
              schema:
                type: object
                properties:
                  role:
                    type: string
                    example: user
        "401":
          description: Unauthorized
        "404":
          description: No role found
  /preferences:
    get:
      operationId: controllers.get_preferences
      tags:
        - User
      summary: Return the user's role
      parameters:
        - in: query
          name: field
          schema:
            type: string
          required: true
          description: The field to retrieve. Can be "favicon-policy", "derivation-iteration", "backup-lifetime", "backup-minimum" or "all"
      responses:
        "200": # status code
          description: Return the user's role
          content:
            application/json:
              schema:
                type: object
                properties:
                  perefences:
                    type: object
                    example: {"field":"value"}
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /google-drive/last-backup/verify:
    get:
      operationId: controllers.verify_last_backup
      tags:
        - Google Drive
      summary: Verify the last backup checksum to determine if the last backup is up to date.
      responses:
        "200": 
          description: Return the last backup date and if it's up to date. If an error occurs during the verification, the status contains the error key.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok|corrupted_file"
                  is_up_to_date:
                    type: boolean
                    example: true
                  last_backup_date:
                    type: string
                    example: 01/01/2001
        "401":
          description: Unauthorized.
        "403":
          description: Access disabled
        "404":
          description: No backup found
        "500":
          description: Internal server error
components:
  securitySchemes:
    JWTAuth:
      type: apiKey
      in: cookie
      name: api-key
      x-apikeyInfoFunc: CryptoClasses.jwt_func.verify_jwt
      
