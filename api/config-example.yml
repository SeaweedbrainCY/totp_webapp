## 
## This is an example configuration for Zero-TOTP.
##

## If a value is commented out, the default value will be used.


api:
    ## The port the API will listen on. Default is 8080.
    # port: 8080

    ## The secret that will be used to sign JWT tokens. CHANGE THIS VALUE !
    ## A random 128 alphanumeric string is required.
    jwt_secret: "unsafe_secret"


    ## Absolute path to the API private key used to sign the vault to guarantee its authenticity.
    ## This must be a PEM encoded RSA private key.
    private_key_path: "path/to/private_key.pem"

    ## Absolute path to the API public key used to verify vault the vault signature before opening it in the frontend.
    ## This must be a PEM encoded RSA public key.
    public_key_path: "path/to/public_key.pem"

    ## Secret used to encrypt flask session.
    ## A random 128 alphanumeric string is required.
    flask_api_secret: "unsafe_secret"

    ## Server side encryption key used to encrypt data stored in the database that is not Encrypted by the ZKE flow
    ## A random 128 alphanumeric string is required.
    ## BE CAREFULL WITHOUT THIS KEY SOME OF SAVED DATA WILL BE UNREADABLE
    ## DO NOT LOOSE THIS KEY
    ## DO NOT COMPROMISE THIS KEY
    server_side_encryption_key: "unsafe_secret" 

    ## Configuration of google drive Oauth. 
    ## See https://developers.google.com/identity/protocols/oauth2 for more information.
    # oauth:
          ## See https://developers.google.com/identity/protocols/oauth2 for more information.
        # client_secret_file_path: "path/to/client_secret.json"





environment:
  ## The environment the API is running in.
  ## This value is used to determine the logging level, CORS and other settings.
  ## Possible values are "local", "development" and "production".
  ## Running non production type can cause security issues.
  type: "production"

database:
    ## The URI of the database to connect to.
    ## The URI must be in the format of "mysql://user:password@host/db_name"
    database_uri: "mysql://user:password@localhost/db_name"



features:

    ## Optional 
    ## Admin features configuration
    # admins:
        ## THIS SHOULD BE USED AS A TEMPORARY FEATURE ONLY 
        ## This will allow the admin to delete users, and all their data.
        ## This should be disabled in production, most of the time.
        # admin_can_delete_users: false
    
    ## Optional
    ## Email notifications configuration
    # emails:
        ## Optional 
        ## Require email validation for new users.
        ## If set to true, users will have to validate their email address before they can use the service.
        ## If set to false, users will be able to use the service without validating their email address.
        # require_email_validation: false

        ## Required if require_email_validation is set to true
        ## Configuration of the SMTP server used to send emails.
        # email_sender_address: "Zero-TOTP <zero-totp@example.com>"
        # email_smtp_server: "smtp.example.com"
        # email_smtp_port: 587
        # email_smtp_username: "username"
        # email_smtp_password: "password"
